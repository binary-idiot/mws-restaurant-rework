{"version":3,"names":[],"mappings":"","sources":["apihelper.js"],"sourcesContent":["\r\nclass APIHelper{\r\n\r\n\t/**\r\n \t* URL to restaurant API\r\n \t*/\r\n\tstatic get API_URL(){\r\n\t\tconst port = 1337;\r\n\t\treturn `http://localhost:${port}`\r\n\t}\r\n\r\n\t/**\r\n\t * GET restaurants from API\r\n\t * @param  {String} query id of restaurant or a url query\r\n\t * @return {Promise}    Promise that resolves to restaurant json from API\r\n\t */\r\n\tstatic getRestaurant(query = ''){\r\n\t\treturn fetch(`${APIHelper.API_URL}/restaurants/${query}`).then(response => {\r\n\t\t\tif(!response.ok)\r\n\t\t\t\tthrow new Error(`Request failed. Returned status of ${response.status}`);\r\n\t\t\treturn response.json();\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Retrive favorite restaurants by passing favorite query to getRestaurant()\r\n\t * @return {Promise} Promise that resolves favorite restaurant json from API\r\n\t */\r\n\tstatic getFavorites(){\r\n\t\treturn getRestaurant('?is_favorite=true');\r\n\t}\r\n\r\n\t/**\r\n\t * Retrive restaurant reviews\r\n\t * @param  {Int}  id            Id of review or restaurant\r\n\t * @param  {Boolean} forRestaurant If true will return all reviews for restaurant given by id\r\n\t * @return {Promise}                Promise that resolves to review json from API\r\n\t */\r\n\tstatic getReview(id = '', forRestaurant = false){\r\n\t\tconst queryString = (forRestaurant) ? '?restaurant_id=' : '';\r\n\r\n\t\treturn fetch(`${APIHelper.API_URL}/reviews/${queryString}${id}`).then(response => {\r\n\t\t\tif(!response.ok)\r\n\t\t\t\tthrow new Error(`Request failed. Returned status of ${response.status}`);\r\n\t\t\treturn response.json();\t\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * POST review to API\r\n\t * @param  {Json} review Review Json\r\n\t * @return {Boolean}\tReturn true if successful false if not\r\n\t */\r\n\tstatic createReview(review){\r\n\t\treturn fetch(`${APIHelper.API_URL}/reviews/`, {\r\n\t\t\tmethod: 'post',\r\n\t\t\tbody: JSON.stringify(review)\r\n\t\t}).then(response => {\r\n\t\t\tif(!response.ok)\r\n\t\t\t\tthrow new Error(`Request failed. Returned status of ${response.status}`);\r\n\t\t\treturn true;\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t\treturn false;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Update favorite restaurants\r\n\t * @param  {Int} id    Id of restaurant\r\n\t * @param  {Boolean} state State of favorite\r\n\t * @return {Boolean}\tReturn true if successful false if not\r\n\t */\r\n\tstatic updateFavorite(id, state){\r\n\t\treturn fetch(`${APIHelper.API_URL}/restaurants/${id}/?is_favorite=${state}`, {method: 'put'}).then(response => {\r\n\t\t\tif(!response.ok)\r\n\t\t\t\tthrow new Error(`Request failed. Returned status of ${response.status}`);\r\n\t\t\treturn true;\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t\treturn false\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Update exsisting review\r\n\t * @param  {Int} id     Id of review to update\r\n\t * @param  {Json} review Review json\r\n\t * @return {Boolean}\tReturn true if successful false if not\r\n\t */\r\n\tstatic updateReview(id, review){\r\n\t\treturn fetch(`${APIHelper.API_URL}/reviews/${id}`, {\r\n\t\t\tmethod: 'put',\r\n\t\t\tbody: JSON.stringify(review)\r\n\t\t}).then(response => {\r\n\t\t\tif(!response.ok)\r\n\t\t\t\tthrow new Error(`Request failed. Returned status of ${response.status}`);\r\n\t\t\treturn true;\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t\treturn false;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Delete review\r\n\t * @param  {Int} id Id of review to delete\r\n\t * @return {Boolean}\tReturn true if successful false if not\r\n\t */\r\n\tstatic deleteReview(id){\r\n\t\treturn fetch(`${APIHelper.API_URL}/reviews/${id}`, {\r\n\t\t\tmethod: 'delete'\r\n\t\t}).then(response => {\r\n\t\t\tif(!response.ok)\r\n\t\t\t\tthrow new Error(`Request failed. Returned status of ${response.status}`);\r\n\t\t\treturn true;\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t\treturn false;\r\n\t\t})\r\n\t}\r\n}\r\n"],"file":"../js/apihelper.js"}