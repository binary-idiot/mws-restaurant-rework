{"version":3,"sources":["details.js"],"names":["restaurant","worker","newMap","document","addEventListener","event","this","Worker","onmessage","handleWorkerMessage","getRestaurant","getParameterByName","msg","data","content","msgData","retrieved","self","requestAnimationFrame","initMap","fillRestaurantHTML","L","map","center","latlng","lat","lng","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","Helper","mapMarkerForRestaurant","name","url","window","location","href","replace","results","RegExp","exec","decodeURIComponent","postMessage","action","getElementById","innerHTML","address","image","imgSrc","imageUrlForRestaurant","className","src","srcset","size","alt","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillBreadcrumb","operatingHours","hours","key","row","createElement","day","appendChild","time","oh","breadcrumb","li"],"mappings":"AAAA,IAAIA,WACHC,OAED,IAAIC,OAEHC,SAASC,iBAAiB,mBAAoBC,IAE7CC,KAAKL,OAAS,IAAIM,OAAO,+BACzBD,KAAKL,OAAOO,UAAYC,oBACxBC,cAAcC,mBAAmB,SAOnCF,oBAAsBG,CAAAA,IACrB,MAAMC,EAAOD,EAAIC,KACXC,EAAUD,EAAKE,QAErB,OAAOF,EAAKG,WACX,IAAK,aACJC,KAAKjB,WAAac,EAClBI,sBAAsBC,SACtBD,sBAAsBE,uBAQzBD,QAAU,MACT,MAAMnB,EAAaiB,KAAKjB,WACxBiB,KAAKf,OAASmB,EAAEC,IAAI,MAAO,CACvBC,OAAQ,CAACvB,EAAWwB,OAAOC,IAAKzB,EAAWwB,OAAOE,KAClDC,KAAM,GACNC,iBAAiB,IAEnBP,EAAEQ,UAAU,oFAAqF,CAC/FC,YAAa,iGACbC,QAAS,GACTC,YAAa,0NAGbC,GAAI,mBACHC,MAAMhC,QAETiC,OAAOC,uBAAuBnB,KAAKjB,WAAYiB,KAAKf,UASvDS,mBAAqB,EAAC0B,EAAMC,KACrBA,IAAKA,EAAMC,OAAOC,SAASC,MAC9BJ,EAAOA,EAAKK,QAAQ,UAAW,QAC/B,IACIC,EADQ,IAAIC,OAAO,OAASP,EAAO,qBACnBQ,KAAKP,GACzB,OAAKK,EACAA,EAAQ,GACNG,mBAAmBH,EAAQ,GAAGD,QAAQ,MAAO,MAD5B,GADH,OAUzBhC,cAAgB,EAACuB,EAAIhC,EAASgB,KAAKhB,UAClCA,EAAO8C,YAAY,CAACC,OAAQ,gBAAiBf,GAAIA,MAOlDb,mBAAqB,MACpB,MAAMpB,EAAaiB,KAAKjB,WAEXG,SAAS8C,eAAe,mBAChCC,UAAYlD,EAAWqC,KAEZlC,SAAS8C,eAAe,sBAChCC,UAAYlD,EAAWmD,QAE/B,MAAMC,EAAQjD,SAAS8C,eAAe,kBAChCI,EAAUlB,OAAOmB,sBAAsBtD,GAC7CoD,EAAMG,UAAY,iBAClBH,EAAMI,OAAUH,cAChBD,EAAMK,UAAaJ,qBAA4BA,sBAA6BA,mBAC5ED,EAAMM,KAAO,uDACbN,EAAMO,IAAM3D,EAAW2D,IAEPxD,SAAS8C,eAAe,sBAChCC,UAAYlD,EAAW4D,aAG3B5D,EAAW6D,iBACfC,0BAIAC,mBAODD,wBAA0B,EAACE,EAAiB/C,KAAKjB,WAAW6D,mBAC3D,MAAMI,EAAQ9D,SAAS8C,eAAe,oBACtC,IAAK,IAAIiB,KAAOF,EAAgB,CAC/B,MAAMG,EAAMhE,SAASiE,cAAc,MAE7BC,EAAMlE,SAASiE,cAAc,MACnCC,EAAInB,UAAYgB,EAChBC,EAAIG,YAAYD,GAEhB,MAAME,EAAOpE,SAASiE,cAAc,MAC9BI,EAAKR,EAAeE,GAAKxB,QAAQ,IAAK,QAC5C6B,EAAKrB,UAAYsB,EACjBL,EAAIG,YAAYC,GAEhBN,EAAMK,YAAYH,MAQpBJ,eAAiB,MAChB,MAAM/D,EAAaiB,KAAKjB,WAElByE,EAAatE,SAAS8C,eAAe,cACrCyB,EAAKvE,SAASiE,cAAc,MAClCM,EAAGxB,UAAYlD,EAAWqC,KAC1BoC,EAAWH,YAAYI","file":"../js/details.js","sourcesContent":["let restaurant,\r\n\tworker;\r\n\r\nvar newMap;\r\n\r\n\tdocument.addEventListener('DOMContentLoaded', event => {\r\n\t\t// worker to handle all restaurant retrieval\r\n\t\tthis.worker = new Worker('/src/js/restaurantWorker.js');\r\n\t\tthis.worker.onmessage = handleWorkerMessage;\r\n\t\tgetRestaurant(getParameterByName('id'));\r\n\t})\r\n\r\n/**\r\n * Handle messages from worker thread\r\n * @param  {Message} msg Message from worker thread\r\n */\r\nhandleWorkerMessage = msg => {\r\n\tconst data = msg.data;\r\n\tconst content = data.msgData;\r\n\r\n\tswitch(data.retrieved){\r\n\t\tcase 'restaurant':\r\n\t\t\tself.restaurant = content;\r\n\t\t\trequestAnimationFrame(initMap);\r\n\t\t\trequestAnimationFrame(fillRestaurantHTML);\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\n/**\r\n * Initialize mapbox map\r\n */\r\ninitMap = () => {\r\n\tconst restaurant = self.restaurant;\r\n\tself.newMap = L.map('map', {\r\n\t    center: [restaurant.latlng.lat, restaurant.latlng.lng],\r\n\t    zoom: 16,\r\n\t    scrollWheelZoom: false\r\n\t  });\r\n\t  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n\t    mapboxToken: 'pk.eyJ1IjoiYmluYXJ5aWRpb3QiLCJhIjoiY2pqMzZjNWRtMWF2YTNrbXRsb2VueGlydyJ9.mkjp31-552zW210Dz1PUcQ',\r\n\t    maxZoom: 18,\r\n\t    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n\t      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n\t      'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n\t    id: 'mapbox.streets'    \r\n\t  }).addTo(newMap);\r\n\r\n\t  Helper.mapMarkerForRestaurant(self.restaurant, self.newMap);\r\n}\r\n\r\n/**\r\n * get value of url param\r\n * @param  {String} name param to search for\r\n * @param  {String} url  url to search for\r\n * @return {String}      Value of param\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url) url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\r\n        results = regex.exec(url);\r\n    if (!results) return null;\r\n    if (!results[2]) return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n/**\r\n * Have the worker retrieve a restaurant\r\n * @param  {RestaurantWorker} worker worker to handle request\r\n * @param  {Int} id     id of restaurant to retrieve\r\n */\r\ngetRestaurant = (id, worker = self.worker) => {\r\n\tworker.postMessage({action: 'getRestaurant', id: id});\r\n}\r\n\r\n/**\r\n * Fill restaurant page with restaurant data\r\n * @param  {Json} restaurant Restaurant to fill page with\r\n */\r\nfillRestaurantHTML = () => {\r\n\tconst restaurant = self.restaurant;\r\n\r\n\tconst name = document.getElementById('restaurant-name');\r\n\tname.innerHTML = restaurant.name;\r\n\r\n\tconst address = document.getElementById('restaurant-address');\r\n\taddress.innerHTML = restaurant.address;\r\n\r\n\tconst image = document.getElementById('restaurant-img');\r\n\tconst imgSrc =  Helper.imageUrlForRestaurant(restaurant);\r\n\timage.className = 'restaurant-img'\r\n\timage.src = `${ imgSrc }-small.jpg`;\r\n\timage.srcset = `${ imgSrc }-small.jpg 300w, ${ imgSrc }-medium.jpg 600w, ${ imgSrc }-large.jpg 800w`;\r\n\timage.size = '(max-width: 767) calc(100% - 30px), calc(50% - 30px)';\r\n\timage.alt = restaurant.alt;\r\n\r\n\tconst cuisine = document.getElementById('restaurant-cuisine');\r\n\tcuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n\t// fill operating hours\r\n\tif (restaurant.operating_hours) {\r\n\tfillRestaurantHoursHTML();\r\n\t}\r\n\r\n\t//reviews\r\n\tfillBreadcrumb();\r\n}\r\n\r\n/**\r\n * Fill operating hours section\r\n * @param  {Json} operatingHours Operating hours to add to page\r\n */\r\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n\tconst hours = document.getElementById('restaurant-hours');\r\n\tfor (let key in operatingHours) {\r\n\t\tconst row = document.createElement('tr');\r\n\r\n\t\tconst day = document.createElement('td');\r\n\t\tday.innerHTML = key;\r\n\t\trow.appendChild(day);\r\n\r\n\t\tconst time = document.createElement('td');\r\n\t\tconst oh = operatingHours[key].replace(/,/, '<br>');\r\n\t\ttime.innerHTML = oh;\r\n\t\trow.appendChild(time);\r\n\r\n\t\thours.appendChild(row);\r\n\t}\r\n}\r\n\r\n/**\r\n * Fill page breadcrumb\r\n * @param  {Json} restaurant Restaurant for page\r\n */\r\nfillBreadcrumb = () => {\r\n\tconst restaurant = self.restaurant;\r\n\r\n\tconst breadcrumb = document.getElementById('breadcrumb');\r\n\tconst li = document.createElement('li');\r\n\tli.innerHTML = restaurant.name;\r\n\tbreadcrumb.appendChild(li);\r\n}"]}