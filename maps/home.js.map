{"version":3,"names":[],"mappings":"","sources":["home.js"],"sourcesContent":["let restaurants,\r\n\tneighborhoods,\r\n\tcuisines,\r\n\tworker;\r\n\r\nvar newMap;\r\nvar markers = [];\r\n\r\n\tdocument.addEventListener('DOMContentLoaded', event => {\r\n\t\tSWHelper.registerServiceWorker();\r\n\r\n\t\t// worker to handle all restaurant retrieval\r\n\t\tthis.worker = new Worker('js/restaurantWorker.js');\r\n\t\tthis.worker.onmessage = handleWorkerMessage;\r\n\t\trequestAnimationFrame(initMap);\r\n\t\tupdateRestaurants();\r\n\t\tgetNeighborhoodsAndCuisines();\r\n\t});\r\n\r\n/**\r\n * Handle messages from worker thread\r\n * @param  {Message} msg Message from worker\r\n */\r\nhandleWorkerMessage = msg => {\r\n\tconst data = msg.data;\r\n\tconst content = data.msgData;\r\n\r\n\tswitch(data.retrieved){\r\n\t\tcase 'restaurants':\r\n\t\t\taddRestaurants(content);\r\n\t\t\trequestAnimationFrame(fillRestaurantsHTML);\r\n\t\t\tbreak;\r\n\t\tcase 'neighborhoodsAndCuisines':\r\n\t\t\tself.neighborhoods = content.neighborhoods;\r\n\t\t\trequestAnimationFrame(fillNeighborhoodHTML);\r\n\t\t\tself.cuisines = content.cuisines;\r\n\t\t\trequestAnimationFrame(fillCuisineHTML);\r\n\t\t\tbreak;\r\n\t\tcase 'favorited':\r\n\t\t\tif(!content)\r\n\t\t\t\tregisterSync();\r\n\t\t\tupdateRestaurants();\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\n/**\r\n\t * Register serviceWorker sync event\r\n\t * @return {Promise} Resolves if registration is successful\r\n\t */\r\n\tregisterSync = () =>{\r\n\t\tnavigator.serviceWorker.ready.then(reg => {\r\n\t\t\treturn reg.sync.register('syncReviews')\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\r\n/**\r\n * Initialize mapbox map\r\n */\r\ninitMap = () => {\r\n\tself.newMap = L.map('map', {\r\n\t    center: [40.722216, -73.987501],\r\n\t    zoom: 12,\r\n\t    scrollWheelZoom: false\r\n\t  });\r\n\tL.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n\tmapboxToken: 'pk.eyJ1IjoiYmluYXJ5aWRpb3QiLCJhIjoiY2pqMzZjNWRtMWF2YTNrbXRsb2VueGlydyJ9.mkjp31-552zW210Dz1PUcQ',\r\n\tmaxZoom: 18,\r\n\tattribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n\t  '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n\t  'Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n\tid: 'mapbox.streets'\r\n\t}).addTo(newMap);\r\n}\r\n\r\n/**\r\n * Have the worker retrieve restaurants based on filter criteria\r\n * @param {RestaurantWorker} worker worker to handle request\r\n * @param {Json} filter criteria to filter restaurants by\r\n */\r\ngetRestaurants = (filter, worker = this.worker) => {\r\n\tworker.postMessage({action: 'getRestaurants', filter: filter});\r\n}\r\n\r\n/**\r\n * Have the worker retrieve all neighborhoods and cuisines\r\n * @param  {RestaurantWorker} worker worker to handle request\r\n */\r\ngetNeighborhoodsAndCuisines = (worker = this.worker) => {\r\n\tworker.postMessage({action: 'getNeighborhoodsAndCuisines'});\r\n}\r\n\r\n/**\r\n * Have the worker set favorite to the other state \r\n * @param  {Json} restaurant The restaurant to (un)favorite\r\n * @param  {RestaurantWorker} worker worker to handle request\r\n */\r\ntoggleFavorite = (restaurant, worker = this.worker) => {\r\n\tlet state = false;\r\n\tif(restaurant.is_favorite == false || restaurant.is_favorite == \"false\")\r\n\t\tstate = true;\r\n\tworker.postMessage({action: 'setFavorite', id:restaurant.id, state:state});\r\n}\r\n\r\n/**\r\n * Add or update self.restaurants\r\n * @param  {Json} newRestaurants Restaurants to add\r\n */\r\naddRestaurants = newRestaurants => {\r\n\r\n\tfor(newRestaurant of newRestaurants){\r\n\t\tlet restaurantFound = false;\r\n\r\n\t\t// if restaurant is already in self.restaurants then update it otherwise add it to the list;\r\n\t\tfor([index, restaurant] of self.restaurants.entries()){\r\n\t\t\tif(restaurant.id == newRestaurant.id){\r\n\t\t\t\trestaurantFound = true;\r\n\t\t\t\tself.restaurants[index] = newRestaurant;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(!restaurantFound){\r\n\t\t\tself.restaurants.push(newRestaurant);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Send selected neighborhood and cuisine to getRestaurants()\r\n */\r\nupdateRestaurants = () => {\r\n\tresetRestaurants();\r\n\r\n\tconst cSelect = document.getElementById('cuisines-select');\r\n\tconst nSelect = document.getElementById('neighborhoods-select');\r\n\r\n\tconst cIndex = cSelect.selectedIndex;\r\n\tconst nIndex = nSelect.selectedIndex;\r\n\r\n\tconst cuisine = cSelect[cIndex].value;\r\n\tconst neighborhood = nSelect[nIndex].value;\r\n\r\n\tgetRestaurants({neighborhood: neighborhood, cuisine: cuisine});\r\n}\r\n\r\n/**\r\n * Fill neighborhoods-select with retrieved neighborhoods\r\n */\r\nfillNeighborhoodHTML = () => {\r\n\tconst select = document.getElementById('neighborhoods-select');\r\n\tfor(neighborhood of self.neighborhoods){\r\n\t\tconst option = document.createElement('option');\r\n\t\toption.innerHTML = neighborhood;\r\n\t\toption.value = neighborhood;\r\n\t\tselect.append(option);\r\n\t}\r\n}\r\n\r\n/**\r\n * Fill cuisines-select with retrieved cuisines\r\n */\r\nfillCuisineHTML = () => {\r\n\tconst select = document.getElementById('cuisines-select');\r\n\tfor(cuisine of self.cuisines){\r\n\t\tconst option = document.createElement('option');\r\n\t\toption.innerHTML = cuisine;\r\n\t\toption.value = cuisine;\r\n\t\tselect.append(option);\r\n\t}\r\n}\r\n\r\n/**\r\n * Fill restaurants-list with retrieved restaurants\r\n */\r\nfillRestaurantsHTML = () => {\r\n\tconst ul = document.getElementById('restaurants-list');\r\n\r\n\tfor(restaurant of self.restaurants)\r\n\t\tul.append(createRestaurantHTML(restaurant));\r\n\taddMarkersToMap();\r\n}\r\n\r\n/**\r\n * Clear existing restaurants from page\r\n */\r\nresetRestaurants = () => {\r\n\tself.restaurants = [];\r\n\r\n\tconst ul = document.getElementById('restaurants-list');\r\n\tul.innerHTML = '';\r\n\r\n\tif(self.markers){\r\n\t\tfor(marker of self.markers)\r\n\t\t\tmarker.remove();\r\n\t}\r\n\tself.markers = [];\r\n\t\r\n}\r\n\r\n/**\r\n * Create a li for a restaurant\r\n * @param  {Json} restaurant Restaurant to create\r\n * @return {HTML}            li for restaurant\r\n */\r\ncreateRestaurantHTML = restaurant => {\r\n\tconst li = document.createElement('li');\r\n\r\n\tconst image = document.createElement('img');\r\n\tconst imgSrc = Helper.imageUrlForRestaurant(restaurant); \r\n\timage.className = 'restaurant-img';\r\n\timage.src = `${ imgSrc }-small.jpg`;\r\n\timage.srcset = `${ imgSrc }-small.jpg 300w, ${ imgSrc }-medium.jpg 600w, ${ imgSrc }-large.jpg 800w`;\r\n\timage.sizes = '(max-width: 424px) 300px, (max-width: 573px) 449px, 300px';\r\n\timage.alt = restaurant.alt;\r\n\tli.append(image);\r\n\r\n\r\n\tconst titleContainer = document.createElement('div');\r\n\ttitleContainer.classList.add('restaurant-container');\r\n\r\n\tconst name = document.createElement('h2');\r\n\tname.innerHTML = restaurant.name;\r\n\ttitleContainer.append(name);\r\n\r\n\tconst fav = document.createElement('button');\r\n\tfav.innerHTML = '★';\r\n\tfav.onclick = e => {toggleFavorite(restaurant)};\r\n\tfav.classList.add('fav-button');\r\n\tfav.setAttribute('aria-label', 'Toggle favorite');\r\n\r\n\tconsole.log(`restaurant ${restaurant.id} is ${restaurant.is_favorite}`);\r\n\r\n\tif(restaurant.is_favorite == true || restaurant.is_favorite == \"true\"){\r\n\t\tfav.classList.add('favorited');\r\n\t\tli.setAttribute('aria-label', 'Favorite Restaurant');\r\n\t}else{\r\n\t\tfav.classList.remove('favorited');\r\n\t\tli.setAttribute('aria-label', 'Restaurant');\r\n\t}\r\n\r\n\ttitleContainer.append(fav);\r\n\r\n\tconst neighborhood = document.createElement('p');\r\n\tneighborhood.innerHTML = restaurant.neighborhood;\r\n\ttitleContainer.append(neighborhood);\r\n\r\n\tconst address = document.createElement('p');\r\n\tconst adr = restaurant.address.replace(/,/, ',<br>');\r\n\taddress.innerHTML = adr;\r\n\ttitleContainer.append(address);\r\n\r\n\tli.append(titleContainer);\r\n\r\n\r\n\tconst more = document.createElement('a');\r\n\tmore.innerHTML = 'View Details';\r\n\tmore.href = Helper.urlForRestaurant(restaurant);\r\n\tli.append(more)\r\n\r\n\treturn li\r\n}\r\n\r\n/**\r\n * Add map markers for each restaurant\r\n */\r\naddMarkersToMap = () => {\r\n\tfor(restaurant of self.restaurants) {\r\n\t\tconst marker = Helper.mapMarkerForRestaurant(restaurant, self.newMap);\r\n\t\tmarker.on(\"click\", () => {\r\n\t\t\twindow.location.href = marker.options.url;\r\n\t\t});\r\n\t\tself.markers.push(marker);\r\n\t}\r\n}"],"file":"../js/home.js"}