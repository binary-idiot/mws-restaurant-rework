{"version":3,"sources":["dbhelper.js"],"names":["importScripts","restaurantDb","idb","open","db","oldVersion","createObjectStore","keyPath","DBHelper","[object Object]","id","then","restaurantStore","transaction","objectStore","response","get","Number","getAll","catch","error","console","restaurant","tx","put","complete"],"mappings":"AAAAA,cAAc,oDAEd,IAAIC,aAAeC,IAAIC,KAAK,iBAAkB,EAAGC,IAC/C,OAAOA,EAAGC,YACR,KAAK,EACmBD,EAAGE,kBAAkB,aAAc,CAACC,QAAS,OACrE,KAAK,EACeH,EAAGE,kBAAkB,SAAU,CAACC,QAAS,UAIjE,MAAMC,SAOLC,qBAAqBC,EAAK,GACzB,OAAOT,aAAaU,KAAKP,IACxB,MACMQ,EADKR,EAAGS,YAAY,cACCC,YAAY,cACvC,IAAIC,EAKJ,OAHCA,EADQ,GAANL,EACSE,EAAgBI,IAAIC,OAAOP,IAE3BE,EAAgBM,WAE1BC,MAAMC,IACRC,QAAQD,MAAMA,KAShBX,uBAAuBa,GACtB,OAAOrB,aAAaU,KAAKP,IACxB,MAAMmB,EAAKnB,EAAGS,YAAY,aAAc,aAGxC,OAFwBU,EAAGT,YAAY,cACvBU,IAAIF,GACbC,EAAGE,WACRN,MAAMC,IACRC,QAAQD,MAAMA","file":"../js/dbhelper.js","sourcesContent":["importScripts('//rawgit.com/jakearchibald/idb/master/lib/idb.js')\r\n\r\nvar restaurantDb = idb.open('restaurants-db', 1, db => {\r\n  switch(db.oldVersion){\r\n    case 0:\r\n    const restaurantStore = db.createObjectStore('restaurant', {keyPath: 'id'});\r\n    case 1:\r\n    const reviewStore = db.createObjectStore('review', {keyPath: 'id'});\r\n  }\r\n});\r\n\r\nclass DBHelper {\r\n\r\n\t/**\r\n\t * retrieve restaurants from db\r\n\t * @param  {Int} id id of restaurant to retrieve, if null all restaurants will be retrieved\r\n\t * @return {Promise}    Will resolve to an array of retrieved restaurants\r\n\t */\r\n\tstatic getRestaurant(id = 0) {\r\n\t\treturn restaurantDb.then(db => {\r\n\t\t\tconst tx = db.transaction('restaurant');\r\n\t\t\tconst restaurantStore = tx.objectStore('restaurant');\r\n\t\t\tlet response;\r\n\t\t\tif(id != 0)\r\n\t\t\t\tresponse = restaurantStore.get(Number(id));\r\n\t\t\telse\r\n\t\t\t\tresponse = restaurantStore.getAll();\r\n\t\t\treturn response;\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * update restaurant in db\r\n\t * @param  {Json} restaurant The restaurant data in json\r\n\t * @return {Promise}            Resolves if restaurant is successfully updated\r\n\t */\r\n\tstatic storeRestaurant(restaurant){\r\n\t\treturn restaurantDb.then(db => {\r\n\t\t\tconst tx = db.transaction('restaurant', 'readwrite');\r\n\t\t\tconst restaurantStore = tx.objectStore('restaurant');\r\n\t\t\trestaurantStore.put(restaurant);\r\n\t\t\treturn tx.complete;\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\r\n}"]}