{"version":3,"sources":["dbhelper.js"],"names":["importScripts","restaurantDb","idb","open","db","oldVersion","createObjectStore","keyPath","transaction","objectStore","createIndex","autoIncrement","DBHelper","[object Object]","id","then","restaurantStore","response","get","Number","getAll","catch","error","console","restaurant","tx","put","complete","reviewStore","restaurantId","index","review","add","key","delete"],"mappings":"AAAAA,cAAc,oDAEd,IAAIC,aAAeC,IAAIC,KAAK,iBAAkB,EAAGC,IAC/C,OAAOA,EAAGC,YACR,KAAK,EACJD,EAAGE,kBAAkB,aAAc,CAACC,QAAS,OAC9C,KAAK,EACJH,EAAGE,kBAAkB,SAAU,CAACC,QAAS,OAC1C,KAAK,EACgBH,EAAGI,YAAYC,YAAY,UACnCC,YAAY,aAAc,iBACvC,KAAK,EACJN,EAAGE,kBAAkB,WAAY,CAACK,eAAe,OAItD,MAAMC,SAOLC,qBAAqBC,EAAK,GACzB,OAAOb,aAAac,KAAKX,IACxB,MACMY,EADKZ,EAAGI,YAAY,cACCC,YAAY,cACvC,IAAIQ,EAKJ,OAHCA,EADQ,GAANH,EACSE,EAAgBE,IAAIC,OAAOL,IAE3BE,EAAgBI,WAE1BC,MAAMC,IACRC,QAAQD,MAAMA,KAShBT,uBAAuBW,GACtB,OAAOvB,aAAac,KAAKX,IACxB,MAAMqB,EAAKrB,EAAGI,YAAY,aAAc,aAGxC,OAFwBiB,EAAGhB,YAAY,cACvBiB,IAAIF,GACbC,EAAGE,WACRN,MAAMC,IACRC,QAAQD,MAAMA,KAShBT,iBAAiBC,EAAK,GACrB,OAAOb,aAAac,KAAKX,IACxB,MACMwB,EADKxB,EAAGI,YAAY,UACHC,YAAY,UACnC,IAAIQ,EAKJ,OAHCA,EADQ,GAANH,EACSc,EAAYV,IAAIC,OAAOL,IAEvBc,EAAYR,WAEtBC,MAAMC,IACRC,QAAQD,MAAMA,KAShBT,4BAA4BgB,GAC3B,OAAO5B,aAAac,KAAKX,IAKxB,OAJWA,EAAGI,YAAY,UACHC,YAAY,UACGqB,MAAM,cAEnBV,OAAOD,OAAOU,MACrCR,MAAMC,IACRC,QAAQD,MAAMA,KAIhBT,0BACC,OAAOZ,aAAac,KAAKX,IAIxB,OAHWA,EAAGI,YAAY,YACPC,YAAY,YAEhBW,WACbC,MAAMC,IACRC,QAAQD,MAAMA,KAShBT,mBAAmBkB,GAClB,OAAO9B,aAAac,KAAKX,IACxB,MAAMqB,EAAKrB,EAAGI,YAAY,SAAU,aAGpC,OAFoBiB,EAAGhB,YAAY,UACvBiB,IAAIK,GACTN,EAAGE,WACRN,MAAMC,IACRC,QAAQD,MAAMA,KAShBT,yBAAyBC,GACxB,OAAOb,aAAac,KAAKX,IACxB,MAAMqB,EAAKrB,EAAGI,YAAY,WAAY,aAGtC,OAFgBiB,EAAGhB,YAAY,YACvBuB,IAAIlB,GACLW,EAAGE,WACRN,MAAMC,IACRC,QAAQD,MAAMA,KAShBT,0BAA0BoB,GACzB,OAAOhC,aAAac,KAAKX,IACxB,MAAMqB,EAAKrB,EAAGI,YAAY,WAAY,aAGtC,OAFgBiB,EAAGhB,YAAY,YACvByB,OAAOD,GACRR,EAAGE,WACRN,MAAMC,IACRC,QAAQD,MAAMA","file":"../js/dbhelper.js","sourcesContent":["importScripts('//rawgit.com/jakearchibald/idb/master/lib/idb.js')\r\n\r\nvar restaurantDb = idb.open('restaurants-db', 4, db => {\r\n  switch(db.oldVersion){\r\n    case 0:\r\n    \tdb.createObjectStore('restaurant', {keyPath: 'id'});\r\n    case 1:\r\n    \tdb.createObjectStore('review', {keyPath: 'id'});\r\n    case 2:\r\n    \tconst reviewStore = db.transaction.objectStore('review');\r\n    \treviewStore.createIndex('restaurant', 'restaurant_id');\r\n    case 3:\r\n    \tdb.createObjectStore('unsynced', {autoIncrement: true});\r\n  }\r\n});\r\n\r\nclass DBHelper {\r\n\r\n\t/**\r\n\t * retrieve restaurants from db\r\n\t * @param  {Int} id id of restaurant to retrieve, if null all restaurants will be retrieved\r\n\t * @return {Promise}    Will resolve to an array of retrieved restaurants\r\n\t */\r\n\tstatic getRestaurant(id = 0) {\r\n\t\treturn restaurantDb.then(db => {\r\n\t\t\tconst tx = db.transaction('restaurant');\r\n\t\t\tconst restaurantStore = tx.objectStore('restaurant');\r\n\t\t\tlet response;\r\n\t\t\tif(id != 0)\r\n\t\t\t\tresponse = restaurantStore.get(Number(id));\r\n\t\t\telse\r\n\t\t\t\tresponse = restaurantStore.getAll();\r\n\t\t\treturn response;\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * update restaurant in db\r\n\t * @param  {Json} restaurant The restaurant data in json\r\n\t * @return {Promise}            Resolves if restaurant is successfully updated\r\n\t */\r\n\tstatic storeRestaurant(restaurant){\r\n\t\treturn restaurantDb.then(db => {\r\n\t\t\tconst tx = db.transaction('restaurant', 'readwrite');\r\n\t\t\tconst restaurantStore = tx.objectStore('restaurant');\r\n\t\t\trestaurantStore.put(restaurant);\r\n\t\t\treturn tx.complete;\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * retrieve reviews from db\r\n\t * @param  {Number} id id of review to retrieve\r\n\t * @return {Promise}    promise that will resolve to review json from db\r\n\t */\r\n\tstatic getReview(id = 0){\r\n\t\treturn restaurantDb.then(db => {\r\n\t\t\tconst tx = db.transaction('review');\r\n\t\t\tconst reviewStore = tx.objectStore('review');\r\n\t\t\tlet response;\r\n\t\t\tif(id != 0)\r\n\t\t\t\tresponse = reviewStore.get(Number(id));\r\n\t\t\telse\r\n\t\t\t\tresponse = reviewStore.getAll();\r\n\t\t\treturn response;\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * retrieve reviews for restaurant\r\n\t * @param  {[type]} restaurantId id of restaurant to retrieve reviews for\r\n\t * @return {Promise}    promise that will resolve to restaurant review json from db\r\n\t */\r\n\tstatic getRestaurantReviews(restaurantId){\r\n\t\treturn restaurantDb.then(db => {\r\n\t\t\tconst tx = db.transaction('review');\r\n\t\t\tconst reviewStore = tx.objectStore('review');\r\n\t\t\tconst restaurantReviews = reviewStore.index('restaurant');\r\n\r\n\t\t\treturn restaurantReviews.getAll(Number(restaurantId));\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\r\n\tstatic getReviewsToSync(){\r\n\t\treturn restaurantDb.then(db => {\r\n\t\t\tconst tx = db.transaction('unsynced');\r\n\t\t\tconst idStore = tx.objectStore('unsynced');\r\n\r\n\t\t\treturn idStore.getAll();\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * store new or updated review in db\r\n\t * @param  {Json} review Restaurant data in json\r\n\t * @return {Promise}        Resolves if the review is sucessfully updated\r\n\t */\r\n\tstatic storeReview(review){\r\n\t\treturn restaurantDb.then(db => {\r\n\t\t\tconst tx = db.transaction('review', 'readwrite');\r\n\t\t\tconst reviewStore = tx.objectStore('review');\r\n\t\t\treviewStore.put(review);\r\n\t\t\treturn tx.complete;\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Store id of unsynced review\r\n\t * @param  {int} id Id of unsynced restaurant\r\n\t * @return {Promise}        Resolves if the review is sucessfully updated\r\n\t */\r\n\tstatic storeReviewToSync(id){\r\n\t\treturn restaurantDb.then(db => {\r\n\t\t\tconst tx = db.transaction('unsynced', 'readwrite');\r\n\t\t\tconst idStore = tx.objectStore('unsynced');\r\n\t\t\tidStore.add(id);\r\n\t\t\treturn tx.complete;\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes id with the specified key from unsynced ids\r\n\t * @param  {int} key Key of id to delete\r\n\t * @return {Promise}        Resolves if the review is sucessfully updated\r\n\t */\r\n\tstatic deleteReviewToSync(key){\r\n\t\treturn restaurantDb.then(db => {\r\n\t\t\tconst tx = db.transaction('unsynced', 'readwrite');\r\n\t\t\tconst idStore = tx.objectStore('unsynced');\r\n\t\t\tidStore.delete(key);\r\n\t\t\treturn tx.complete;\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.error(error);\r\n\t\t});\r\n\t}\r\n}"]}