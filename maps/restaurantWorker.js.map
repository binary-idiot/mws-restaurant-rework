{"version":3,"sources":["restaurantWorker.js"],"names":["importScripts","self","onmessage","msg","data","action","getRestaurants","filter","getRestaurant","id","getNeighborhoodsAndCuisines","DBHelper","then","restaurants","console","log","length","filteredRestaurants","filterRestaurants","postMessage","retrieved","msgData","APIHelper","newRestaurants","updateRestaurants","restaurant","newRestaurant","updateRestaurant","neighborhoodsAndCuisines","neighborhoods","extractNeighborhoods","cuisines","extractCuisines","results","cuisine","r","cuisine_type","neighborhood","map","v","i","indexOf","oldRestaurants","updatedRestaurants","restaurantFound","updatedAt","push","storeRestaurant","oldRestaurant"],"mappings":"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","file":"../js/restaurantWorker.js","sourcesContent":["importScripts('/js/apihelper.js',\r\n\t'/js/dbhelper.js');\r\n/**\r\n * Handle message from  main thread\r\n * @param  {Message} msg Message from main thread\r\n */\r\nself.onmessage = msg => {\r\n\tconst data = msg.data;\r\n\tswitch(data.action){\r\n\t\tcase 'getRestaurants':\r\n\t\t\tgetRestaurants(data.filter);\r\n\t\t\tbreak;\r\n\t\tcase 'getRestaurant':\r\n\t\t\tgetRestaurant(data.id);\r\n\t\t\tbreak;\r\n\t\tcase 'getNeighborhoodsAndCuisines':\r\n\t\t\tgetNeighborhoodsAndCuisines();\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\n/**\r\n * Fetch restaurants and update local db if out of date\r\n * @param  {Json} filter criteria to filter restaurants by before sending back to main thread\r\n */\r\ngetRestaurants = filter => {\r\n\tDBHelper.getRestaurant().then((restaurants) => {\r\n\t\t\r\n\t\t// If restaurants are retrieved from the db filter them and send them to the main thread\r\n\t\tif(restaurants){\r\n\t\t\t\r\n\t\t\tconsole.log(`${restaurants.length} restaurants found in db`);\r\n\t\t\tconst filteredRestaurants = filterRestaurants(restaurants, filter);\r\n\t\t\tself.postMessage({retrieved: 'restaurants', msgData: filteredRestaurants});\r\n\t\t}\r\n\r\n\t\tAPIHelper.getRestaurant().then(newRestaurants => {\r\n\t\t\t\r\n\t\t\tconst restaurantsUpdated = updateRestaurants(restaurants, newRestaurants);\r\n\r\n\t\t\tif(restaurantsUpdated){\r\n\t\t\t\tconst filteredRestaurants = filterRestaurants(newRestaurants, filter);\r\n\t\t\t\tself.postMessage({retrieved: 'restaurants', msgData: filteredRestaurants});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t});\r\n}\r\n\r\n/**\r\n * Fetch a restaurant and update the local db if out of date\r\n * @param  {Int} id the id of the restaurant to fetch\r\n */\r\ngetRestaurant = id => {\r\n\tDBHelper.getRestaurant(id).then(restaurant =>{\r\n\r\n\t\t// If restaurant is retrieved from db then send it to the main thread\r\n\t\tif(restaurant){\r\n\t\t\tconsole.log(`Restaurant ${id} found in db`);\r\n\t\t\tself.postMessage({retrieved: 'restaurant', msgData: restaurant});\r\n\t\t}\r\n\r\n\t\tAPIHelper.getRestaurant(id).then(newRestaurant => {\r\n\t\t\tconst restaurantUpdated = updateRestaurant(restaurant, newRestaurant);\r\n\r\n\t\t\tif(restaurantUpdated){\r\n\t\t\t\tself.postMessage({retrieved: 'restaurant', msgData: newRestaurant});\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t});\r\n}\r\n\r\n/**\r\n * Retrieve all neighborhoods and cuisines from restaurants and send them back to the main thread\r\n */\r\ngetNeighborhoodsAndCuisines = () => {\r\n\tDBHelper.getRestaurant().then(restaurants => {\r\n\t\tif(restaurants){\r\n\t\t\tconst neighborhoodsAndCuisines = {neighborhoods: extractNeighborhoods(restaurants), cuisines: extractCuisines(restaurants)};\r\n\t\t\tconsole.log(`Found ${neighborhoodsAndCuisines.neighborhoods.length} neighborhoods and ${neighborhoodsAndCuisines.cuisines.length} cuisines in db.`);\r\n\t\t\tself.postMessage({retrieved: 'neighborhoodsAndCuisines', msgData: neighborhoodsAndCuisines});\r\n\t\t}\r\n\r\n\t\tAPIHelper.getRestaurant().then(newRestaurants => {\r\n\r\n\t\t\tconst updatedRestaurants = updateRestaurants(restaurants, newRestaurants);\r\n\r\n\t\t\tif(updatedRestaurants){\r\n\t\t\t\tconst neighborhoodsAndCuisines = {neighborhoods: extractNeighborhoods(newRestaurants), cuisines: extractCuisines(newRestaurants)};\r\n\t\t\t\tconsole.log(`Found ${neighborhoodsAndCuisines.neighborhoods.length} neighborhoods and ${neighborhoodsAndCuisines.cuisines.length} cuisines from api.`);\r\n\t\t\t\tself.postMessage({retrieved: 'neighborhoodsAndCuisines', msgData: neighborhoodsAndCuisines});\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\n/**\r\n * Filter restaurants by cuisine and neighborhood\r\n * @param  {Json} restaurants list of restaurants to filter\r\n * @param  {Json} filter      criteria to filter by\r\n */\r\nfilterRestaurants = (restaurants, filter) => {\r\n\tlet results = restaurants;\r\n\tif(filter.cuisine != 'all')\r\n\t\tresults = results.filter(r => r.cuisine_type == filter.cuisine);\r\n\tif(filter.neighborhood != 'all')\r\n\t\tresults = results.filter(r => r.neighborhood == filter.neighborhood);\r\n\tconsole.log(`${results.length} restaurants match filter`);\r\n\treturn results;\r\n}\r\n\r\n/**\r\n * Extract neighborhoods from restaurants\r\n * @param  {Json} restaurants Restaurants to extract neighborhoods from from\r\n * @return {String}             Array of all neighborhoods\r\n */\r\nextractNeighborhoods = restaurants => {\r\n\tconst neighborhoods = restaurants.map((v,i) => restaurants[i].neighborhood);\r\n\tconst uniqueNeighborhoods = neighborhoods.filter((v,i) => neighborhoods.indexOf(v) == i);\r\n\r\n\treturn uniqueNeighborhoods;\r\n}\r\n\r\n/**\r\n * Extract cuisines from restaurants\r\n * @param  {Json} restaurants Restaurants to extract cuisines from from\r\n * @return {String}             Array of all cuisines\r\n */\r\nextractCuisines = restaurants => {\r\n\tconst cuisines = restaurants.map((v,i) => restaurants[i].cuisine_type);\r\n\tconst uniqueCuisines = cuisines.filter((v,i) => cuisines.indexOf(v) == i);\r\n\r\n\treturn uniqueCuisines;\r\n}\r\n\r\n/**\r\n * Check if oldRestaurants are out of date and if they are update the db\r\n * @param  {Json} oldRestaurants Restaurants retrieved from db\r\n * @param  {Json} newRestaurants Restaurants retrieved from api\r\n * @return {Boolean}               Returns true if oldRestaurants were out of date\r\n */\r\nupdateRestaurants = (oldRestaurants, newRestaurants) => {\r\n\r\n\tlet updatedRestaurants = [];\r\n\r\n\t// If restaurants are retrieved from api check to see if they are newer than those in the db\r\n\tif(newRestaurants){\r\n\r\n\t\tfor(newRestaurant of newRestaurants) {\r\n\t\t\tlet restaurantFound = false;\r\n\r\n\t\t\t// If there are no restaurants retrieved from the db then skip checking and add them to updatedRestaurants\r\n\t\t\tif(oldRestaurants){\r\n\t\t\t\tfor(restaurant of oldRestaurants) {\r\n\t\t\t\t\tif(restaurant.updatedAt >= newRestaurant.updatedAt){\r\n\t\t\t\t\t\trestaurantFound = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// If restaurant isnt found add it to the list of restaurants to update\r\n\t\t\tif(!restaurantFound){\r\n\t\t\t\tupdatedRestaurants.push(newRestaurant);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If there are any outdated restaurants in the db update and return true else return false\r\n\tif(updatedRestaurants.length != 0){\r\n\r\n\t\tconsole.log(`${updatedRestaurants.length} restaurants are outdated, updating...`);\r\n\r\n\t\tfor(restaurant of updatedRestaurants) {\r\n\t\t\tDBHelper.storeRestaurant(restaurant);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\treturn false;\r\n\r\n}\r\n\r\n/**\r\n * Check if oldRestaurant is out of date and if it is update the db\r\n * @param  {Json} oldRestaurant Restaurant retrieved from db\r\n * @param  {Json} newRestaurant Restaurant retrieved from api\r\n * @return {Boolean}               Returns true if oldRestaurant was out of date\r\n */\r\nupdateRestaurant = (oldRestaurant, newRestaurant) => {\r\n\t// If restaurant is retrieved from api check to see if its newer than the one in the db\r\n\tif(newRestaurant){\r\n\t\tlet updateRestaurant = true;\r\n\r\n\t\tif(oldRestaurant && (oldRestaurant.updatedAt >= newRestaurant.updatedAt)){\r\n\t\t\tupdateRestaurant = false;\r\n\t\t}\r\n\r\n\t\t// If restaurant is outdated then send it to the main thread and update the db\r\n\t\tif(updateRestaurant){\r\n\t\t\tconsole.log(`Restaurant ${newRestaurant.id} outdated, Updating...`);\r\n\t\t\tDBHelper.storeRestaurant(newRestaurant);\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n}"]}