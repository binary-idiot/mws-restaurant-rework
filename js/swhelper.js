class SWHelper{static registerServiceWorker(){navigator.serviceWorker&&(navigator.serviceWorker.register("/sw.js").then(e=>{if(console.log("Registered!"),navigator.serviceWorker.controller)return e.waiting?(console.log("Waiting"),void updateReady(e.waiting)):e.installing?(console.log("Installing"),void trackInstalling(e.installing)):void e.addEventListener("updatefound",()=>{trackInstalling(e.installing)})}),navigator.serviceWorker.addEventListener("controllerchange",()=>{window.location.reload()}))}}trackInstalling=(e=>{console.log("tracking"),e.addEventListener("statechange",()=>{"installed"==e.state&&updateReady(e)})}),updateReady=(e=>{console.log("Update Ready");const t=document.getElementById("refresh-dialog"),n=t.getElementsByTagName("button");for(let t of n)t.addEventListener("click",t=>{this.onClick(t,e)});t.classList.remove("hidden"),document.getElementById("dialog-spacer").classList.remove("hidden"),document.getElementById("refresh-button").focus()}),onClick=((e,t)=>{"refresh"===e.target.value?t.postMessage({action:"skipWaiting"}):document.getElementById("refresh-dialog").classList.add("hidden"),document.getElementById("dialog-spacer").classList.add("hidden")});
//# sourceMappingURL=../maps/swhelper.js.map
