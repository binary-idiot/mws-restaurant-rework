importScripts("https://rawgit.com/jakearchibald/idb/master/lib/idb.js");var restaurantDb=idb.open("restaurants-db",5,e=>{switch(e.oldVersion){case 0:e.createObjectStore("restaurant",{keyPath:"id"});case 1:e.createObjectStore("review",{keyPath:"id"});case 2:e.transaction.objectStore("review").createIndex("restaurant","restaurant_id");case 3:e.createObjectStore("unsynced",{autoIncrement:!0});case 4:e.transaction.objectStore("unsynced").createIndex("mode","mode")}});class DBHelper{static getRestaurant(e=0){return restaurantDb.then(t=>{const r=t.transaction("restaurant").objectStore("restaurant");let a;return a=0!=e?r.get(Number(e)):r.getAll()}).catch(e=>{console.error(e)})}static storeRestaurant(e){return restaurantDb.then(t=>{const r=t.transaction("restaurant","readwrite");return r.objectStore("restaurant").put(e),r.complete}).catch(e=>{console.error(e)})}static setFavorite(e,t){return this.getRestaurant(e).then(e=>(e.is_favorite=t,this.storeRestaurant(e)))}static getReview(e=0){return restaurantDb.then(t=>{const r=t.transaction("review").objectStore("review");let a;return a=0!=e?r.get(Number(e)):r.getAll()}).catch(e=>{console.error(e)})}static getRestaurantReviews(e){return restaurantDb.then(t=>{return t.transaction("review").objectStore("review").index("restaurant").getAll(Number(e))}).catch(e=>{console.error(e)})}static getOperationsToSync(){return restaurantDb.then(e=>{let t=[];const r=e.transaction("unsynced");return r.objectStore("unsynced").iterateCursor(e=>{e&&(console.log(`key: ${e.primaryKey}, val: ${e.value}`),t.push({key:e.primaryKey,value:e.value}),e.continue())}),r.complete.then(()=>t)}).catch(e=>{console.error(e)})}static storeReview(e){return restaurantDb.then(t=>{const r=t.transaction("review","readwrite");return r.objectStore("review").put(e),r.complete}).catch(e=>{console.error(e)})}static deleteReview(e){return restaurantDb.then(t=>{const r=t.transaction("review","readwrite");return r.objectStore("review").delete(e),r.complete}).catch(e=>{console.error(e)})}static storeOperationToSync(e){return restaurantDb.then(t=>{const r=t.transaction("unsynced","readwrite");return r.objectStore("unsynced").add(e),r.complete}).catch(e=>{console.error(e)})}static deleteOperationToSync(e){return restaurantDb.then(t=>{const r=t.transaction("unsynced","readwrite");return r.objectStore("unsynced").delete(e),r.complete}).catch(e=>{console.error(e)})}}
//# sourceMappingURL=../maps/dbhelper.js.map
