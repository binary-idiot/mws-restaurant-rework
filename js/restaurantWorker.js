importScripts("/js/apihelper.js","/js/dbhelper.js"),self.onmessage=(e=>{const t=e.data;switch(t.action){case"getRestaurants":getRestaurants(t.filter);break;case"getRestaurant":getRestaurant(t.id);break;case"getNeighborhoodsAndCuisines":getNeighborhoodsAndCuisines()}}),getRestaurants=(e=>{DBHelper.getRestaurant().then(t=>{if(t){console.log(`${t.length} restaurants found in db`);const s=filterRestaurants(t,e);self.postMessage({retrieved:"restaurants",msgData:s})}APIHelper.getRestaurant().then(s=>{if(updateRestaurants(t,s)){const t=filterRestaurants(s,e);self.postMessage({retrieved:"restaurants",msgData:t})}})})}),getRestaurant=(e=>{DBHelper.getRestaurant(e).then(t=>{t&&(console.log(`Restaurant ${e} found in db`),self.postMessage({retrieved:"restaurant",msgData:t})),APIHelper.getRestaurant(e).then(e=>{updateRestaurant(t,e)&&self.postMessage({retrieved:"restaurant",msgData:e})})})}),getNeighborhoodsAndCuisines=(()=>{DBHelper.getRestaurant().then(e=>{if(e){const t={neighborhoods:extractNeighborhoods(e),cuisines:extractCuisines(e)};console.log(`Found ${t.neighborhoods.length} neighborhoods and ${t.cuisines.length} cuisines in db.`),self.postMessage({retrieved:"neighborhoodsAndCuisines",msgData:t})}APIHelper.getRestaurant().then(t=>{if(updateRestaurants(e,t)){const e={neighborhoods:extractNeighborhoods(t),cuisines:extractCuisines(t)};console.log(`Found ${e.neighborhoods.length} neighborhoods and ${e.cuisines.length} cuisines from api.`),self.postMessage({retrieved:"neighborhoodsAndCuisines",msgData:e})}})})}),filterRestaurants=((e,t)=>{let s=e;return"all"!=t.cuisine&&(s=s.filter(e=>e.cuisine_type==t.cuisine)),"all"!=t.neighborhood&&(s=s.filter(e=>e.neighborhood==t.neighborhood)),console.log(`${s.length} restaurants match filter`),s}),extractNeighborhoods=(e=>{const t=e.map((t,s)=>e[s].neighborhood);return t.filter((e,s)=>t.indexOf(e)==s)}),extractCuisines=(e=>{const t=e.map((t,s)=>e[s].cuisine_type);return t.filter((e,s)=>t.indexOf(e)==s)}),updateRestaurants=((e,t)=>{let s=[];if(t)for(newRestaurant of t){let t=!1;if(e)for(restaurant of e)if(restaurant.updatedAt>=newRestaurant.updatedAt){t=!0;break}t||s.push(newRestaurant)}if(0!=s.length){for(restaurant of(console.log(`${s.length} restaurants are outdated, updating...`),s))DBHelper.storeRestaurant(restaurant);return!0}return!1}),updateRestaurant=((e,t)=>{if(t){let s=!0;return e&&e.updatedAt>=t.updatedAt&&(s=!1),!!s&&(console.log(`Restaurant ${t.id} outdated, Updating...`),DBHelper.storeRestaurant(t),!0)}});
//# sourceMappingURL=../maps/restaurantWorker.js.map
